@startuml

autonumber

participant User as u

participant "User Agent" as ua

participant "Wallet Frontend" as w

participant "Wallet Backend" as b

participant "Credential Issuer" as i


ua --> w: get credential

w -> i: get metadata

i -> w: Metadata cointaining credential types, key requirements, endpoints

w -> b: get nonce
b -> w: return nonce

w -> w : obtain app attestation (nonce)

w -> b : get assertion for oauth exchange(app attestation, client_id, redirect_uri)

b -> b : check app_attestation & client data

b -> b : generate assertion (iss=wallet backend, client_id, redirect_uri)

b -> w : assertion

w -> w : create PKCE code verifier

w -> i : par (assertion, response_type, client_id, code_challenge,\ncode_challenge_method, authorization_details, redirect_uri)

i -> w : request_uri


w --> ua: authorize (client_id, request_uri)
ua --> i: authorize (client_id, request_uri)


note over u, i: user authentication and consent

i --> ua : authorize response (code)
ua --> w : authorize response (code)

w -> w : gen DPoP key

w -> w : gen DPoP proof for issuer token endpoint

w -> i : token (assertion, code, client_id, code_verifier, dpop_proof)

note over w, i: wallet authenticates with assertion as OAuth Client\ncredential issuer checks assertion issuer (wallet provider) with trust registry

i -> w : access_token, c_nonce

w -> w : gen key : key, key_attestation

w -> w : create proof of possession (c_nonce)

w  -> w : create DPoP proof for issuance request

w -> i : request credential (access_token, credential_type, format, proof, key_policy, dpop_proof)

i -> w : credential

@enduml