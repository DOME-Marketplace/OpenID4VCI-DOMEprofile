@startuml
autonumber
participant "User Agent" as u
participant "Wallet Frontend" as w
participant "Wallet Backend" as b
participant "Credential Issuer" as i

u --> w: get credential

w -> i: get metadata
i -> w: credential types, key requirements, endpoints
w -> w : create PKCE code verifier

w -> i : par (response_type, client_id, code_challenge,\ncode_challenge_method, authorization_details, redirect_uri)

i --> w : request_uri


w -> u: authorize (client_id, request_uri)
u -> i: authorize (client_id, request_uri) 
note over u, i: user authenticatation/identification + consent
i --> u : authorize response (code)
u --> w: authorize response (code)
w -> i : token (code, client_id, assertion)
note over w, i: wallet frontend authenticates with certificate issued by wallet provider (or any other trusted 3rd party) as OAuth Client\ncredential issuer checks assertion issuer (wallet provider) with trust registry\naccess token is bound to wallet certificate
i -> w : access_token, c_nonce
w -> w : gen key : key, key_attestation
w -> w : create proof of posssion (c_nonce)
w -> i : issue credential (access_token, credential_type, format, proof, key_policy)
note over w, i: wallet frontend authenticates with same certificate as used for token request\ncredential issuer checks access token cert binding
i -> w : credential
@enduml