@startuml
participant "User Agent" as u
participant Verifier as v
participant "Wallet Frontend" as w
participant "Wallet Backend" as b
participant Issuer as i

u --> v : do something
v --> u : request credential presentation
u --> w : request credential presentation
w -> w : credential not present
w -> w : determine issuer
w -> i: get metadata
i -> w: credential types, key requirements, endpoints
w --> u : authorize (credential_type, client_id, ...)
u --> i: authorize (credential_type, client_id, ...)
...
note left: user authenticatation/identification + consent
i --> u : authorize response (code)
u --> w: authorize response (code)
w --> b: get nonce
w -> w : obtain app attestation (nonce)
w -> b : exchange code (code, app attestation)
b -> b : check app_attestation
b -> i : token (code, client_id, ...)
note left: wallet authenticates with issuer as OAuth Client (public key based)\nissuer may check wallet against trust registry
i -> b : access_token, c_nonce
b -> w: access_token, c_nonce
w -> w : gen key : key, key_attestation
w -> w : create proof of posssion (c_nonce)
w -> i : issue credential (access_token, credential_type, format, proof, key_policy)
i -> w : credential
w -> w: store credential
w -> w: create presentation
w --> u: credential presentation response
u --> v: credential presentation response
@enduml